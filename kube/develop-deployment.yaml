apiVersion: apps/v1
kind: Deployment
metadata:
  name: workfluxdeployment-develop
  namespace: workflux-elixir-develop
  labels:
    app: workflux
    stage: develop
spec:
  selector:
    matchLabels:
      app: workflux
      stage: develop
  template:
    metadata:
      labels:
        app: workflux
        stage: develop
    spec:
      imagePullSecrets:
        - name: pipeline-docker-registry
      containers:
      - name: workflux-oidc
        image: ${CICD_REGISTRY}/krini/workflux:dev-${CICD_EXECUTION_SEQUENCE}
        env:
        - name: BUILD_NUMBER
          value: oidc-${CICD_EXECUTION_SEQUENCE}
        - name: host
          value: workflux.dev.krini.ingress.rancher.computational.bio
        - name: mysql-host
          valueFrom:
            secretKeyRef:
              name: mysql-workflux-develop
              key: mysql-host
        - name: mysql-password
          valueFrom:
            secretKeyRef:
              name: mysql-workflux-develop
              key: mysql-password
        - name: mysql-username
          valueFrom:
            secretKeyRef:
              name: mysql-workflux-develop
              key: mysql-username
        - name: ftp-host
          valueFrom:
            secretKeyRef:
              name: ftp
              key: url
        - name: ftp-username
          valueFrom:
            secretKeyRef:
              name: ftp
              key: username
        - name: ftp-password 
          valueFrom:
            secretKeyRef:
              name: ftp
              key: password
        ports:
        - containerPort: 5000
        volumeMounts:
        - name: shared-pv
          mountPath: /mnt/workflux
      volumes:
        - name: shared-pv
          persistentVolumeClaim:
            claimName: shared-develop
---
apiVersion: v1
kind: Service
metadata:
  name: workfluxservice-develop
  namespace: workflux-elixir-develop
spec:
  selector:
    app: workflux
    stage: develop
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: workfluxingress-develop
  namespace: workflux-elixir-develop
  annotations:
    cert-manager.io/issuer: letsencrypt-prod
spec:
  rules:
  - host: workflux.dev.krini.ingress.rancher.computational.bio
    http:
      paths:
      - backend:
          serviceName: workfluxservice-develop
          servicePort: 80
        path: /
  tls: # < placing a host in the TLS config will indicate a certificate should be created
  - hosts:
    - workflux.dev.krini.ingress.rancher.computational.bio
    secretName: workflux-develop-letsencrypt-prod-private-cert # < cert-manager will store the created certificate in this secret.
